#ifndef LEX_TEST_HPP
#define LEX_TEST_HPP

#include <iostream>
#include <map>

enum yytokentype {
    NONE = 0,
    STRING_LITERAL = 260,
    PLUSPLUS = 260,
    MINUSMINUS,
    EQUAL_TO,
    NOT_EQUAL_TO,
    LESS_THAN_EQUAL,
    MORE_THAN_EQUAL,
    AND,
    OR,
    LEFT_SHIFT,
    RIGHT_SHIFT,
    PLUS_EQUAL,
    MINUS_EQUAL,
    TIMES_EQUAL,
    DIVIDE_EQUAL,
    MOD_EQUAL,
    LEFT_SHIFT_EQUAL,
    RIGHT_SHIFT_EQUAL,
    B_AND_EQUAL,
    XOR_EQUAL,
    B_OR_EQUAL,
    ARROW,
    AUTO,
    BREAK,
    CASE,
    CHAR,
    CONST,
    CONTINUE,
    DEFAULT,
    DO,
    DOUBLE,
    ELSE, 
    ENUM,
    ENUM_VAL,
    FLOAT,
    FOR,
    GOTO,
    IF,
    INT,
    LONG,
    REGISTER,
    RETURN,
    SHORT,
    SIGNED,
    SIZEOF,
    STATIC,
    STRUCT,
    SWITCH,
    TYPEDEF,
    UNION,
    UNSIGNED,
    VOID,
    WHILE,
    EXTERN,
    VOLATILE,
    NUMBER,
    IDENTIFIER,
    TYPEDEF_T
};

const std::map<yytokentype, std::string> tokenMap = {
    {STRING_LITERAL,"STRING_LITERAL"},
    {PLUSPLUS,"PLUSPLUS"},
    {MINUSMINUS,"MINUSMINUS"},
    {EQUAL_TO,"EQUAL_TO"},
    {NOT_EQUAL_TO,"NOT_EQUAL_TO"},
    {LESS_THAN_EQUAL,"LESS_THAN_EQUAL"},
    {MORE_THAN_EQUAL,"MORE_THAN_EQUAL"},
    {AND,"AND"},
    {OR,"OR"},
    {LEFT_SHIFT,"LEFT_SHIFT"},
    {RIGHT_SHIFT,"RIGHT_SHIFT"},
    {PLUS_EQUAL,"PLUS_EQUAL"},
    {MINUS_EQUAL,"MINUS_EQUAL"},
    {TIMES_EQUAL,"TIMES_EQUAL"},
    {DIVIDE_EQUAL,"DIVIDE_EQUAL"},
    {MOD_EQUAL,"MOD_EQUAL"},
    {LEFT_SHIFT_EQUAL,"LEFT_SHIFT_EQUAL"},
    {RIGHT_SHIFT_EQUAL,"RIGHT_SHIFT_EQUAL"},
    {B_AND_EQUAL,"B_AND_EQUAL"},
    {XOR_EQUAL,"XOR_EQUAL"},
    {B_OR_EQUAL,"B_OR_EQUAL"},
    {ARROW,"ARROW"},
    {AUTO,"AUTO"},
    {BREAK,"BREAK"},
    {CASE,"CASE"},
    {CHAR,"CHAR"},
    {CONST,"CONST"},
    {CONTINUE,"CONTINUE"},
    {DEFAULT,"DEFAULT"},
    {DO,"DO"},
    {DOUBLE,"DOUBLE"},
    {ELSE,"ELSE"}, 
    {ENUM,"ENUM"},
    {ENUM_VAL,"ENUM_VAL"},
    {FLOAT,"FLOAT"},
    {FOR,"FOR"},
    {GOTO,"GOTO"},
    {IF,"IF"},
    {INT,"INT"},
    {LONG,"LONG"},
    {REGISTER,"REGISTER"},
    {RETURN,"RETURN"},
    {SHORT,"SHORT"},
    {SIGNED,"SIGNED"},
    {SIZEOF,"SIZEOF"},
    {STATIC,"STATIC"},
    {STRUCT,"STRUCT"},
    {SWITCH,"SWITCH"},
    {TYPEDEF,"TYPEDEF"},
    {UNION,"UNION"},
    {UNSIGNED,"UNSIGNED"},
    {VOID,"VOID"},
    {WHILE,"WHILE"},
    {EXTERN,"EXTERN"},
    {VOLATILE,"VOLATILE"},
    {NUMBER,"NUMBER"},
    {IDENTIFIER,"IDENTIFIER"},
    {TYPEDEF_T,"TYPEDEF_T"}
};

union TokenValue{
    double number;
    std::string *string;
};

extern TokenValue yylval;

extern int yylex();

#endif